Search n tracks (randomly) on library matching the conditions given
according to the current selected track and tags. Conditions are
calculated using combinations of tag values instead of simple queries.

Playlist Tools Usage:
	- The number of output tracks may be set at global config.
	- Forced query to pre-filter tracks may be set at global config.
	- Tags and number of matches may be set at the appropriate submenu.
	- Duplicates are filtered by title, artist & date.

Buttons usage:
	- The number of output tracks may be set at properties panel.
	- Forced query to pre-filter tracks may be set at properties panel.
	- Tags and number of matches may be set at properties panel.
	- Duplicates may also be filtered using the appropriate setting at
	properties panel.

Note this ONLY USES already existing tags and queries, it will not
calculate similarity or anything else (like Music Map).

Conditions are set as an object with keys (tags) and values (number of
coincidences):
	sameBy = {'GENRE': 1, 'STYLE': 2 , 'MOOD': 5} -> Must match at
	least 1	genre value, 2 style values and 5 mood values.

Setting a 0 value for any key (tag) forces matching of all the tag
values for that tag name.
	sameBy = {'GENRE': 0, 'STYLE': 2 , 'MOOD': 5} -> Must match all
	genre values, 2 style values and 5 mood values.

If X value is greater than the values of a tag, then it simply must
match all of them. For ex. if we select a track with 3 moods:
	sameBy = {'GENRE': 0, 'STYLE': 2 , 'MOOD': 5} -> Must match all
	genre values , 2 style values and (3 < 5) all moods values.

Setting a -X value for any key (tag) forces matching of all the tag
values less X. If multi-value tag has less values than x, then must
match only one. For ex. if we select a track with 3 genres:
	sameBy = {'GENRE': -1, 'STYLE': 2 , 'MOOD': 5} -> Must match
	(3-1=) 2 genre values , 2 style values and 5 mood values.
	sameBy = {'GENRE': -2, 'STYLE': 2 , 'MOOD': 5} -> Must match
	(3-2=) 1 genre values , 2 style values and 5 mood values.
	sameBy = {'GENRE': -10, 'STYLE': 2 , 'MOOD': 5} -> Must match
	(3 <= 10) 1 genre values, 2 style values and 5 mood values.

+X/-X value for any key (tag) can be float € (0,1). Outside that range
they have no use. Final values are rounded, and minimum will always be
1. Maximum all tags values. Also f(-X) = f(1 - X):
	sameBy = {'GENRE': 0.66, 'STYLE': 2 , 'MOOD': 5} -> Must match
	(n * 2/3) two thirds of genre values , 2 style values and
	5 mood values.
	sameBy = {'GENRE': -0.33, 'STYLE': 2 , 'MOOD': 5} -> Must match
	(n - n * 1/3 = n * 2/3) same than previous example.
	sameBy = {'GENRE': 0.5, 'STYLE': 2 , 'MOOD': 5} -> Must match
	(n * 1/2) half of the genre values , 2 style values and 5
	mood values.

After query search, duplicates are removed according to the tags set
(checkDuplicatesBy). You can change sorting, playlist name and/or
force a final query (added to the other requisites).

- Tags logic -
Title-format only tags, like "rating" or "$year(%date%)" are acquired
via TF, but must be written without "%", like the rest. See dynamicTags
at 'helpers_xxx_tags.js'. ONLY expressions defined there can be used.
Why? No way to know if the output is a number, a string, etc. if
arbitrary TF expressions were allowed.

When tags are not strings (genre, etc.) but numeric values (date, etc.),
the pair {key: value} works as a range.
See numericTags at 'helpers_xxx_tags.js'.
	sameBy = {'GENRE': -1, 'DATE': 10} -> Must match all genre values
	and	dates between (-10,+10).

A special subset of numeric tags may be cyclic, so the values can only
be within a predefined range. See cyclicTags and cyclicTagsDescriptor
at 'helpers_xxx_tags.js'.

- Examples of functionality -
	old buttons_search_style_moods <->
		sameBy = {'STYLE': 2, 'MOOD': 6}
	buttons_search_by_tags_queries [['STYLE']] <->
		sameBy = {'STYLE': 0}
	buttons_search_by_tags_queries [['STYLE'],['ARTIST']] <->
		sameBy = {'STYLE': 0, 'ARTIST': 0}
	Tracks from same artist and equal rating <->
		sameBy = {'ARTIST': 0, rating: 0}
	Tracks from same genre and style and date within 10 years <->
		sameBy = {'GENRE': 0, 'STYLE': 0, 'DATE': 10}
	Tracks from same genre but allowing n-2 style coincidences and date
	within 10 years <->
		sameBy = {'GENRE': 0, 'STYLE': -2, 'DATE': 10}

- Caveat -
Although the +X/-X notations seem to produce similar results, they
don't. Let's say we have a track with n style values, then:

Using -X notation: final number is always relative to number of tags of
selected track.
	5 values && sameBy = {'GENRE': 0, 'STYLE': -2, 'DATE': 10} ->
	must match (5-2=) 3 styles.
	4 values && sameBy = {'GENRE': 0, 'STYLE': -2, 'DATE': 10} ->
	must match (4-2=) 2 styles.
	3 values && sameBy = {'GENRE': 0, 'STYLE': -2, 'DATE': 10} ->
	must match (3-2=) 1 style.
	2 values && sameBy = {'GENRE': 0, 'STYLE': -2, 'DATE': 10} ->
	must match (2 <= 2) 1 style.
	1 values && sameBy = {'GENRE': 0, 'STYLE': -2, 'DATE': 10} ->
	must match (2 <= 2) 1 style.
But using +X notation: final number is a constant value (if possible).
	5 values && sameBy = {'GENRE': 0, 'STYLE': 2, 'DATE': 10} ->
	must match 2 styles.
	4 values && sameBy = {'GENRE': 0, 'STYLE': 2, 'DATE': 10} ->
	must match 2 styles.
	3 values && sameBy = {'GENRE': 0, 'STYLE': 2, 'DATE': 10} ->
	must match 2 styles.
	2 values && sameBy = {'GENRE': 0, 'STYLE': 2, 'DATE': 10} ->
	must match 2 styles.
	1 values && sameBy = {'GENRE': 0, 'STYLE': 2, 'DATE':s 10} ->
	must match 1 style.