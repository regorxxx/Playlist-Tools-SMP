Filters the library by query and sends results to a new playlist.
Similar to what foobar search or some search/filter plugins do.

Dynamic queries usage are supported in multiple scripts and tools
like Playlist Tools's Query filtering, Pools and Sort, Search by
Distance's pre-analysis filters, etc. (shown on the input popup)

For filtering purposes:
-----------------------
- Empty query will try to apply global forced query if enabled,
otherwise gets replaced with 'ALL'.
- 'ALL' will never apply forced query, even if enabled.

Rules:
------
- Dynamic variables are allowed too, enclosed on '#': #ARTIST#,
#$year(%date%)#, ...
- Dynamic variables are not case sensitive. i.e. #TAG# or #tag#.
- There are a few special variables, which are not evaluated against
a track but globally. For ex: #YEAR# -> 2023
- These placeholders will be replaced with focused item\'s TF result on
execution.
- Using tags alone, translates into multivalue tags/queries by default.
- When using TF expressions ($...), tags are not converted and the
expression is executed 'as is'.
- Standard queries may be added -only- to the end of a dynamic query
expression.
- Multiple dynamic multivalued variables are allowed, but they must be
enclosed on parenthesis to work.
- In any case queries are tested before using it, so errors will be
shown as a popup.

Special global variables:
-------------------------
Doesn't requires a track to be evaluated (i.e. they always work):
	- #DAY# 	  -> 8 (current day)
	- #MONTH#	  -> 3 (current month)
	- #YEAR#	  -> 2025 (current year)
	- #NOW#		  -> 2023-3-8 (current date)
	- #TODAY#	  -> Alias for #NOW#
	- #NOW_TS#	  -> 1750881508 (current Unix timestamp in s)
	- #YESTERDAY#	  -> 2023-3-07 (yesterday date)
	- #YESTERDAY_TS#  -> 1750881508 (yesterday Unix timestamp in s)
	- #VOLUME#	  -> 100 (volume from 0 to 100, rounded)
	- #VOLUMEDB#	  -> -7.53 dB (volume from -100 to 0 dB)
	- #VERSION#	  -> 1.4.1 (foobar version)
	- #ISPLAYING#	  -> 1 (1 if playing, empty otherwise)
	- #ISPAUSED#	  -> 1 (1 if playing, empty otherwise)
	- #PLAYSTATE#	  -> Paused (Paused|Playing|Stopped)
	- #SELTYPE#	  -> active playlist (selection type)
	- #DEVICE#	  -> Null Output (output device name)
	- #DEVICEID#	  -> {5243F9AD-C84F-4723-8194-0788FC021BCC}
	- #SAC#		  -> 1 (1 if stop after current, empty otherwise)
	- #RGMODE#	  -> disabled (Replay Gain mode)
	- #PLAYMODE#	  -> default (Playback Order mode)
	- #PLSCOUNT#	  -> 13 (playlists count)

Special selection variables:
----------------------------
Requires a selection to be evaluated:
	- #SELTRACKS#	  -> 10 (number of selected tracks)
	- #SELDURATION#	  -> 3:09:37 (duration of selected tracks)
	- #SELSIZE#	  -> 1.88 GB (size of selected tracks)
	- #SELPLAYING#	  -> 1 (1 if playing*, empty otherwise)
	- #SELINLIBRARY#  -> 1 (1 if in library, empty otherwise)

(*) Note this will return nothing while playing unless the focused track
is also the playing track. Use #ISPLAYING# to globally evaluate if foobar
is playing, or use %ISPLAYING% but only when following now playing (it will
not work when evaluated on a selection).

Special active playlist variables:
----------------------------------
Requires an active playlist to be evaluated:
	- #PLSIDX#	  -> 3 (index)
	- #PLSNAME#	  -> My playlist (name)
	- #PLSTRACKS#	  -> 27 (number of tracks)
	- #PLSISAUTOPLS#  -> 1 (1 for AutoPlaylists, empty otherwise)
	- #PLSISLOCKED#	  -> 1 (1 if locked, empty otherwise)
	- #PLSDURATION#	  -> 3:09:37 (total duration)
	- #PLSSIZE#	  -> 1.88 GB (total size)
	- #PLSLOCKS#	  -> AddItems (blocked actions)
	- #PLSLOCKNAME#	  -> Quicksearch (lock owner)

Special playing playlist variables:
----------------------------------
Requires a playing playlist to be evaluated:
	- #PLSPLAYIDX#	  -> 3 (index)
	- #PLSPLAYNAME#	  -> My playlist (name)
	- #PLSPLAYTRACKS# -> 27 (number of tracks)
	- #PLSPLAYDURATION# -> 3:09:37 (total duration)
	- #PLSPLAYSIZE#	  -> 1.88 GB (total size)

Note on boolean values:
-----------------------
Variables like #ISPLAYING# return a number when they are true, but also
an invisible "true" value, which can be evaluated with [] or other control
flow functions ($if, ...).

Some examples:
--------------
For a rock track:
GENRE IS #GENRE# -> GENRE IS Rock.
The entire library would be filtered with tracks from that genre.

For a rock and electronic track, it would translate into:
GENRE IS #GENRE# -> (GENRE IS Rock) AND (GENRE IS Electronic)
Note multi-value tags are split and produce multiple query entries
by default. (*)

It can also be used to remap tags like this (for a Bob Dylan's track):
COMPOSER IS #ARTIST# -> COMPOSER IS Bob Dylan

Merging standard and dynamic expressions  is also possible, as long as
the standard query expression is added at the end, like:
GENRE IS #GENRE# AND NOT (%RATING% EQUAL 2 OR %RATING% EQUAL 1)
->
(GENRE IS Psychedelic Rock) AND (GENRE IS Hard Rock) AND NOT (%RATING%
EQUAL 2 OR %RATING% EQUAL 1).

Multiple dynamic queries are also possible. Note how the parenthesis are
used to limit dynamic expansion.
((GENRE IS #GENRE#) OR (STYLE IS #STYLE#))
 ->
(((GENRE IS Psychedelic Rock) AND (GENRE IS Hard Rock)) OR ((STYLE
IS Acid Rock) AND (STYLE IS Live)))

On other cases parenthesis may be redundant (but valid):
((DATE IS #DATE#) OR (DATE IS #$add(%DATE%,1)#))
->
((DATE IS 1969) OR (DATE IS 1970)).

Note how single valued tags don't need extra parenthesis since dynamic
expansion does not apply here:
(DATE IS #DATE# OR DATE IS #$add(%DATE%,1)#)
->
(DATE IS 1969 OR DATE IS 1970)

Common errors:
--------------
Queries don't allow TF expressions after IS/HAS/GREATER/... terms.

For ex:
"$sub(%DATE%,10)" GREATER #DATE# -> "$sub(%DATE%,10)" GREATER 1969
And
%DATE% GREATER #$add(%DATE%,10)# -> %DATE% GREATER 1979
Are equivalent and valid, since both ensure tracks with date > 1979.

But this similar query is non valid (and will throw an error):
%DATE% GREATER "$add(#DATE#,10)" -> %DATE% GREATER "$add(1969,10)"
Since the TF expression is not executed during query evaluation!

Note in these cases there is (usually) no need to add quotes at the
dynamic term when using a function since the final value must be a
string/number, not another function (like the last example).

(*) Since '#TAG# IS VALUE' forces tag to be equal to value, muti-value
tags follow the same rationale. If you want to use another logic (OR,
combinations, etc.) between different values of the same tag
then the tool to use would be 'Search Same By'.